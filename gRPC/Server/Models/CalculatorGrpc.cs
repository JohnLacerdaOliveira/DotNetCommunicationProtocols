// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Calculator.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Calculator {
  public static partial class CalculatorService
  {
    static readonly string __ServiceName = "calculator.CalculatorService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.SimpleCalculationRequest> __Marshaller_calculator_SimpleCalculationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.SimpleCalculationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.SimpleCalculationResponse> __Marshaller_calculator_SimpleCalculationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.SimpleCalculationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.SquareRootRequest> __Marshaller_calculator_SquareRootRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.SquareRootRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.SquareRootResponse> __Marshaller_calculator_SquareRootResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.SquareRootResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.PrimeFactorizationRequest> __Marshaller_calculator_PrimeFactorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.PrimeFactorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.PrimeFactorizationResponse> __Marshaller_calculator_PrimeFactorizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.PrimeFactorizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.AverageCalculationRequest> __Marshaller_calculator_AverageCalculationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.AverageCalculationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.AverageCalculationResponse> __Marshaller_calculator_AverageCalculationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.AverageCalculationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.FindCurrentMaxRequest> __Marshaller_calculator_FindCurrentMaxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.FindCurrentMaxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Calculator.FindCurrentMaxResponse> __Marshaller_calculator_FindCurrentMaxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calculator.FindCurrentMaxResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Calculator.SimpleCalculationRequest, global::Calculator.SimpleCalculationResponse> __Method_SimpleCalculation = new grpc::Method<global::Calculator.SimpleCalculationRequest, global::Calculator.SimpleCalculationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SimpleCalculation",
        __Marshaller_calculator_SimpleCalculationRequest,
        __Marshaller_calculator_SimpleCalculationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Calculator.SquareRootRequest, global::Calculator.SquareRootResponse> __Method_SquareRoot = new grpc::Method<global::Calculator.SquareRootRequest, global::Calculator.SquareRootResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SquareRoot",
        __Marshaller_calculator_SquareRootRequest,
        __Marshaller_calculator_SquareRootResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Calculator.PrimeFactorizationRequest, global::Calculator.PrimeFactorizationResponse> __Method_DecomposeIntoPrimes = new grpc::Method<global::Calculator.PrimeFactorizationRequest, global::Calculator.PrimeFactorizationResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DecomposeIntoPrimes",
        __Marshaller_calculator_PrimeFactorizationRequest,
        __Marshaller_calculator_PrimeFactorizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Calculator.AverageCalculationRequest, global::Calculator.AverageCalculationResponse> __Method_AverageCalculation = new grpc::Method<global::Calculator.AverageCalculationRequest, global::Calculator.AverageCalculationResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AverageCalculation",
        __Marshaller_calculator_AverageCalculationRequest,
        __Marshaller_calculator_AverageCalculationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Calculator.FindCurrentMaxRequest, global::Calculator.FindCurrentMaxResponse> __Method_FindCurrentMax = new grpc::Method<global::Calculator.FindCurrentMaxRequest, global::Calculator.FindCurrentMaxResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "FindCurrentMax",
        __Marshaller_calculator_FindCurrentMaxRequest,
        __Marshaller_calculator_FindCurrentMaxResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Calculator.CalculatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CalculatorService</summary>
    [grpc::BindServiceMethod(typeof(CalculatorService), "BindService")]
    public abstract partial class CalculatorServiceBase
    {
      /// <summary>
      ///Unary request
      /// Performs a calculation based on the provided request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Calculator.SimpleCalculationResponse> SimpleCalculation(global::Calculator.SimpleCalculationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Unary request
      /// Performs a calculation based on the provided request
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Calculator.SquareRootResponse> SquareRoot(global::Calculator.SquareRootRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Server-side streaming response
      /// Decomposes a number into its prime factors
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task DecomposeIntoPrimes(global::Calculator.PrimeFactorizationRequest request, grpc::IServerStreamWriter<global::Calculator.PrimeFactorizationResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Client-side streaming request
      /// CalculateAverage calculates the average of a stream of numbers
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Calculator.AverageCalculationResponse> AverageCalculation(grpc::IAsyncStreamReader<global::Calculator.AverageCalculationRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Bidirectional streaming request
      /// Finds the current masimum value of a collection of numbers as they are streamed by the client
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task FindCurrentMax(grpc::IAsyncStreamReader<global::Calculator.FindCurrentMaxRequest> requestStream, grpc::IServerStreamWriter<global::Calculator.FindCurrentMaxResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CalculatorServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SimpleCalculation, serviceImpl.SimpleCalculation)
          .AddMethod(__Method_SquareRoot, serviceImpl.SquareRoot)
          .AddMethod(__Method_DecomposeIntoPrimes, serviceImpl.DecomposeIntoPrimes)
          .AddMethod(__Method_AverageCalculation, serviceImpl.AverageCalculation)
          .AddMethod(__Method_FindCurrentMax, serviceImpl.FindCurrentMax).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CalculatorServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SimpleCalculation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculator.SimpleCalculationRequest, global::Calculator.SimpleCalculationResponse>(serviceImpl.SimpleCalculation));
      serviceBinder.AddMethod(__Method_SquareRoot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calculator.SquareRootRequest, global::Calculator.SquareRootResponse>(serviceImpl.SquareRoot));
      serviceBinder.AddMethod(__Method_DecomposeIntoPrimes, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Calculator.PrimeFactorizationRequest, global::Calculator.PrimeFactorizationResponse>(serviceImpl.DecomposeIntoPrimes));
      serviceBinder.AddMethod(__Method_AverageCalculation, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Calculator.AverageCalculationRequest, global::Calculator.AverageCalculationResponse>(serviceImpl.AverageCalculation));
      serviceBinder.AddMethod(__Method_FindCurrentMax, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Calculator.FindCurrentMaxRequest, global::Calculator.FindCurrentMaxResponse>(serviceImpl.FindCurrentMax));
    }

  }
}
#endregion
